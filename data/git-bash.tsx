import type { Command } from "./types"

export const gitBashCommands: Command[] = [
  {
    id: "git-init",
    name: "git init",
    description: "Initializes a new Git repository",
    syntax: "git init [directory]",
    example: "git init",
    category: "git-version-control",
  },
  {
    id: "git-clone",
    name: "git clone",
    description: "Creates a copy of a remote repository",
    syntax: "git clone [url] [directory]",
    example: "git clone https://github.com/user/repo.git",
    category: "git-version-control",
  },
  {
    id: "git-add",
    name: "git add",
    description: "Adds files to the staging area",
    syntax: "git add [file(s)]",
    example: "git add .",
    category: "git-version-control",
  },
  {
    id: "git-commit",
    name: "git commit",
    description: "Records changes to the repository",
    syntax: 'git commit -m "[message]"',
    example: 'git commit -m "Fix bug in login form"',
    category: "git-version-control",
  },
  {
    id: "git-push",
    name: "git push",
    description: "Uploads local repository content to a remote repository",
    syntax: "git push [remote] [branch]",
    example: "git push origin main",
    category: "git-version-control",
  },
  {
    id: "git-pull",
    name: "git pull",
    description: "Fetches and merges changes from a remote repository",
    syntax: "git pull [remote] [branch]",
    example: "git pull origin main",
    category: "git-version-control",
  },
  {
    id: "git-branch",
    name: "git branch",
    description: "Lists, creates, or deletes branches",
    syntax: "git branch [name] or git branch -d [name]",
    example: "git branch feature/login",
    category: "git-version-control",
  },
  {
    id: "git-checkout",
    name: "git checkout",
    description: "Switches branches or restores working tree files",
    syntax: "git checkout [branch] or git checkout -b [new-branch]",
    example: "git checkout -b feature/user-profile",
    category: "git-version-control",
  },
  {
    id: "git-status",
    name: "git status",
    description: "Shows the working tree status",
    syntax: "git status",
    example: "git status",
    category: "git-version-control",
  },
  {
    id: "git-log",
    name: "git log",
    description: "Shows the commit logs",
    syntax: "git log [options]",
    example: "git log --oneline",
    category: "git-version-control",
  },
  {
    id: "ls",
    name: "ls",
    description: "Lists directory contents",
    syntax: "ls [options] [file|dir]",
    example: "ls -la",
    category: "file-operations",
  },
  {
    id: "cd",
    name: "cd",
    description: "Changes the current directory",
    syntax: "cd [directory]",
    example: "cd Documents",
    category: "file-operations",
  },
  {
    id: "pwd",
    name: "pwd",
    description: "Prints the working directory",
    syntax: "pwd",
    example: "pwd",
    category: "file-operations",
  },
  {
    id: "mkdir",
    name: "mkdir",
    description: "Creates a new directory",
    syntax: "mkdir [directory]",
    example: "mkdir new_project",
    category: "file-operations",
  },
  {
    id: "rm",
    name: "rm",
    description: "Removes files or directories",
    syntax: "rm [options] [file|directory]",
    example: "rm -rf old_directory",
    category: "file-operations",
  },
  {
    id: "cp",
    name: "cp",
    description: "Copies files and directories",
    syntax: "cp [options] source destination",
    example: "cp -r source_dir target_dir",
    category: "file-operations",
  },
  {
    id: "mv",
    name: "mv",
    description: "Moves or renames files and directories",
    syntax: "mv [options] source destination",
    example: "mv old_name.txt new_name.txt",
    category: "file-operations",
  },
  {
    id: "cat",
    name: "cat",
    description: "Displays the contents of a file",
    syntax: "cat [options] [file]",
    example: "cat package.json",
    category: "file-operations",
  },
  {
    id: "grep",
    name: "grep",
    description: "Searches for patterns in files",
    syntax: "grep [options] pattern [file...]",
    example: 'grep -i "error" *.log',
    category: "text-processing",
  },
  {
    id: "find",
    name: "find",
    description: "Searches for files in a directory hierarchy",
    syntax: "find [path] [expression]",
    example: 'find . -name "*.js"',
    category: "file-operations",
  },
  {
    id: "ssh",
    name: "ssh",
    description: "Secure Shell client for remote login",
    syntax: "ssh [options] [user@]hostname [command]",
    example: "ssh user@example.com",
    category: "network",
  },
  {
    id: "scp",
    name: "scp",
    description: "Securely copies files between hosts",
    syntax: "scp [options] source destination",
    example: "scp file.txt user@example.com:/path/to/destination",
    category: "network",
  },
  {
    id: "chmod",
    name: "chmod",
    description: "Changes file access permissions",
    syntax: "chmod [options] mode file",
    example: "chmod +x script.sh",
    category: "file-operations",
  },
  {
    id: "echo",
    name: "echo",
    description: "Displays a line of text",
    syntax: "echo [string]",
    example: 'echo "Hello, World!"',
    category: "system",
  },
  {
    id: "touch",
    name: "touch",
    description: "Creates an empty file or updates timestamps",
    syntax: "touch [options] [file]",
    example: "touch newfile.txt",
    category: "file-operations",
  },
  {
    id: "bash",
    name: "bash",
    description: "Executes a bash script",
    syntax: "bash [options] [script.sh]",
    example: "bash deploy.sh",
    category: "git-bash-script",
  },
  {
    id: "source",
    name: "source",
    description: "Executes content of a file in the current shell",
    syntax: "source [filename] or . [filename]",
    example: "source .env",
    category: "git-bash-script",
  },
  {
    id: "alias",
    name: "alias",
    description: "Creates a shorthand for a command",
    syntax: "alias [name[=value]]",
    example: 'alias gs="git status"',
    category: "git-bash-script",
  },
]
